{"version":3,"sources":["components/App.jsx","index.js"],"names":["sliderStyle","position","width","height","border","railStyle","marginTop","borderRadius","backgroundColor","distanceCuts","Handle","_ref","_ref$handle","handle","id","value","percent","getHandleProps","react_default","a","createElement","Object","assign","style","left","concat","marginLeft","zIndex","textAlign","cursor","color","fontFamily","fontSize","toFixed","Track","_ref2","source","target","getTrackProps","distance","formatTime","data-pace","Pace","cut","TimeFormat","fromS","Tick","_ref3","tick","count","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","time","handleInputChange","bind","assertThisInitialized","onTimeChange","event","type","checked","name","setState","defineProperty","parseFloat","_this2","es","rootStyle","domain","step","mode","values","_ref4","getRailProps","_ref5","handles","className","map","key","_ref6","tracks","_ref7","toS","_ref8","ticks","length","onChange","react_simple_timefield_default","showSeconds","Component","ReactDOM","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.52d38f90.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Slider, Rail, Handles, Tracks, Ticks } from 'react-compound-slider'\nimport TimeField from 'react-simple-timefield'\nimport TimeFormat from 'hh-mm-ss'\n\n\nconst sliderStyle = {  // Give the slider some width\n    position: 'relative',\n    width: '100%',\n    height: 80,\n    border: '1px solid steelblue',\n};\n\nconst railStyle = {\n    position: 'absolute',\n    width: '100%',\n    height: 10,\n    marginTop: 35,\n    borderRadius: 5,\n    backgroundColor: '#8B9CB6',\n};\nconst distanceCuts = [1,2];\n\nexport function Handle({\n                           handle: { id, value, percent },\n                           getHandleProps\n                       }) {\n    return (\n        <div\n            style={{\n                left: `${percent}%`,\n                position: 'absolute',\n                marginLeft: -15,\n                marginTop: 25,\n                zIndex: 2,\n                width: 30,\n                height: 30,\n                border: 0,\n                textAlign: 'center',\n                cursor: 'pointer',\n                borderRadius: '50%',\n                backgroundColor: '#2C4870',\n                color: '#333',\n            }}\n            {...getHandleProps(id)}\n        >\n            <div style={{ fontFamily: 'Roboto', fontSize: 11, marginTop: -35 }}>\n                {value.toFixed(2)}\n            </div>\n\n        </div>\n\n\n    )\n}\n\nfunction Track({ source, target, getTrackProps, distance, formatTime }) { // your own track component\n    return (\n\n        <div\n            style={{\n                position: 'absolute',\n                height: 10,\n                zIndex: 1,\n                marginTop: 35,\n                backgroundColor: '#546C91',\n                borderRadius: 5,\n                cursor: 'pointer',\n                left: `${source.percent}%`,\n                width: `${target.percent - source.percent}%`,\n            }}\n            {...getTrackProps()} // this will set up events if you want it to be clickeable (optional)\n        >\n            <div style={{ fontFamily: 'Roboto', fontSize: 11, marginTop: -35, left: '50%', position: 'absolute' }} data-pace={Pace(distance, formatTime, (target.percent - source.percent))}>\n                {Pace(distance, formatTime, (target.percent - source.percent))}\n            </div>\n\n        </div>\n\n    )\n}\nfunction Pace(distance, formatTime, cut) {\n    if(distance>0) {\n        return (\n            TimeFormat.fromS(formatTime/distance)\n        )\n    }\n\n}\n\nfunction Tick({ tick, count }) {  // your own tick component\n    return (\n        <div>\n            <div\n                style={{\n                    position: 'absolute',\n                    marginTop: 52,\n                    marginLeft: -0.5,\n                    width: 1,\n                    height: 8,\n                    backgroundColor: 'silver',\n                    left: `${tick.percent}%`,\n                }}\n            />\n            <div\n                style={{\n                    position: 'absolute',\n                    marginTop: 60,\n                    fontSize: 10,\n                    textAlign: 'center',\n                    marginLeft: `${-(100 / count) / 2}%`,\n                    width: `${100 / count}%`,\n                    left: `${tick.percent}%`,\n                }}\n            >\n                {tick.value}\n            </div>\n        </div>\n    )\n}\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            distance: 10,\n            time: '00:40:00'\n        };\n\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.onTimeChange = this.onTimeChange.bind(this);\n\n    }\n\n    handleInputChange(event) {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n\n        this.setState({\n            [name]: parseFloat(value)\n        });\n    }\n    onTimeChange(time) {\n        this.setState({time});\n    }\n\n\n\n\n\n\n    render() {\n        const {time} = this.state;\n         return (\n            <div style={{ height: 120, width: '80%', marginTop: '50px' }}>\n                <Slider\n                    rootStyle={sliderStyle}\n                    domain={[0, this.state.distance]}\n                    step={0.1}\n                    mode={2}\n                    values={distanceCuts}\n                >\n                    <Rail>\n                        {({ getRailProps }) => (\n                            <div style={railStyle} {...getRailProps()} />\n                        )}\n                    </Rail>\n                    <Handles>\n                        {({ handles, getHandleProps }) => (\n                            <div className=\"slider-handles\">\n                                {handles.map(handle => (\n                                    <Handle\n                                        key={handle.id}\n                                        handle={handle}\n                                        getHandleProps={getHandleProps}\n                                    />\n                                ))}\n                            </div>\n                        )}\n                    </Handles>\n                    {/*<Tracks left={false} right={false}>*/}\n                    <Tracks>\n                        {({ tracks, getTrackProps }) => (\n                            <div className=\"slider-tracks\">\n                                {tracks.map(({ id, source, target }) => (\n\n                                    <Track\n                                        key={id}\n                                        source={source}\n                                        target={target}\n                                        getTrackProps={getTrackProps}\n                                        distance = {this.state.distance}\n                                        formatTime = {TimeFormat.toS(this.state.time)}\n                                    />\n                                ))}\n                            </div>\n                        )}\n                    </Tracks>\n                    <Ticks count={this.state.distance}>\n                        {({ ticks }) => (\n                            <div className=\"slider-ticks\">\n                                {ticks.map(tick => (\n                                    <Tick key={tick.id} tick={tick} count={ticks.length} />\n                                ))}\n                            </div>\n                        )}\n                    </Ticks>\n                </Slider>\n                <div>\n                    <form>\n                        <label>\n                            Дистанция:\n                            <input name=\"distance\" type=\"number\" style={{width: 100}} value={this.state.distance} onChange={this.handleInputChange} />\n                        </label>\n                        <br />\n                        <label>\n                            Целевое время:\n                            {/*<input name=\"time\" type=\"time\" value={this.state.time} onChange={this.handleInputChange}  step=\"2\" />*/}\n                            <TimeField value={time} showSeconds={true} style={{width: 100}} onChange={this.onTimeChange}  />\n                        </label>\n                        <br />\n\n                    </form>\n\n                </div>\n            </div>\n        )\n\n    }\n}\n\n\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n\n\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}